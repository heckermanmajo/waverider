---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by majo.
--- DateTime: 22.06.22 09:44
---

---@class Trooper
---The trooper is here to support the player.
---The trooper cna die
---The trooper shoots always at the nearest zombie
---The trooper moves in the right third
---The trooper can move backwards if a zombie is in puruit of him
---The trooper can nopt move outside the map
---@field x
---@field y
---@field w
---@field h
---@field health
---@field fire_rate
---@field move_target_x
---@field move_target_y
---@field rotation
---@field texture
---@field target
---@field shoot_cooldown
---
local Trooper = {}

function Trooper:new(x, y, type)
  local this = {}
  this.id = Utils.uid()
  this.x = x
  this.y = y
  this.w = 32
  this.h = 32
  this.health = 300
  this.fire_rate = 3
  this.move_target_x = x
  this.move_target_y = y
  this.rotation = 0
  this.speed = 70
  this.hard = false
  this.target = nil -- some zombie
  this.shoot_cooldown = 0
  this.type = type
  this.selected = false
  setmetatable(this, Trooper)
  Trooper.__index = Trooper
  table.insert(GameData.trooper, this)

  if this.type == "trooper" then
    this.texture = GameData.textures.trooper.trooper
    this.die_texture = GameData.textures.trooper.dead
    this.fire_rate = 3
  elseif this.type == "shotgun_trooper" then
    this.texture = GameData.textures.trooper.shotgun_trooper
    this.die_texture = GameData.textures.trooper.dead
    this.fire_rate = 5
  elseif this.type == "rpg_trooper" then
    this.texture = GameData.textures.trooper.rpg_trooper
    this.die_texture = GameData.textures.trooper.dead
    this.fire_rate = 8
  end

  return this
end

function Trooper:update_me(delta_frame)
  self.shoot_cooldown = self.shoot_cooldown - delta_frame
  --- move abit around
  if self.move_target_x > self.x then
    self.x = self.x + self.speed * delta_frame
  end
  if self.move_target_x < self.x then
    self.x = self.x - self.speed * delta_frame
  end
  if self.move_target_y > self.y then
    self.y = self.y + self.speed * delta_frame
  end
  if self.move_target_y < self.y then
    self.y = self.y - self.speed * delta_frame
  end

  if self.x > GameData.settings.world_w then
    self.x = GameData.settings.world_w - 32
    self.target_x = self.x
  end
  if self.y > GameData.settings.world_h then
    self.y = GameData.settings.world_h - 32
    self.target_y = self.y
  end
  if self.x < 0 then
    self.x = 0
    self.target_x = self.x
  end
  if self.y < 0 then
    self.y = 0
    self.target_y = self.y
  end

  if self.target == nil then
    if #GameData.zombies == 0 then
      return
    end
    local nearest = GameData.zombies[1]
    ---@param z Zombie
    for key, z in ipairs(GameData.zombies) do
      if
      Utils.distance(self.x, self.y, z.x, z.y)
        < Utils.distance(self.x, self.y, nearest.x, nearest.y)
      then
        nearest = z
      end
    end
    self.target = nearest
  else
    if not self.target.alive then
      self.target = nil
      return
    end
    LootAtProtocol(self, self.target.x, self.target.y)
    -- if zombie is near move away
    if Utils.distance(self.x, self.y, self.target.x, self.target.y) < 50 then
      local direction = (
        math.atan2(
          (self.target.y + math.random() * 50 - self.y),
          (self.target.x + math.random() * 50 - self.x)
        )
      )

      self.x = self.x - math.cos(direction) * self.speed * delta_frame * 2
      self.y = self.y - math.sin(direction) * self.speed * delta_frame * 2
    end
    --- shoot


    if self.type == "trooper" then
      if self.shoot_cooldown <= 0 and self.target ~= nil then
        table.insert(
          GameData.bullets,
          Bullet.new(
            self.x, --start_x,
            self.y + 10, --start_y,
            self.target.x + math.floor(math.random() * 30), --target_x,
            self.target.y + math.floor(math.random() * 30), --target_x,,
            Utils.get_rotation(self.x, self.y, self.target.x, self.target.y), --direction,
            500, --speed
            "rifle"
          )
        )
        self.shoot_cooldown = self.fire_rate
      end
    elseif self.type == "shotgun_trooper" then
      if self.shoot_cooldown <= 0 and self.target ~= nil then
        for i = 0, 8 do
          table.insert(
            GameData.bullets,
            Bullet.new(
              self.x, --start_x,
              self.y + 10, --start_y,
              self.target.x + math.floor(math.random() * 100), --target_x,
              self.target.y + math.floor(math.random() * 100), --target_x,,
              Utils.get_rotation(self.x, self.y, self.target.x, self.target.y), --direction,
              500, --speed
              "rifle"
            )
          )
        end
        self.shoot_cooldown = self.fire_rate
      end
    elseif self.type == "rpg_trooper" then
      --- todo add smoke if we fire granates
      if self.shoot_cooldown <= 0 and self.target ~= nil then
        table.insert(
          GameData.bullets,
          Bullet.new(
            self.x, --start_x,
            self.y + 10, --start_y,
            self.target.x + math.floor(math.random() * 30), --target_x,
            self.target.y + math.floor(math.random() * 30), --target_x,,
            Utils.get_rotation(self.x, self.y, self.target.x, self.target.y), --direction,
            500, --speed
            "granate"
          )
        )
        self.shoot_cooldown = self.fire_rate
      end
    end


  end
end

function Trooper.update_all(delta_frame)
  CollisionProtocol(GameData.trooper, delta_frame)
  for key, t in ipairs(GameData.trooper) do
    t:update_me(delta_frame)
  end
  for key, t in ipairs(GameData.trooper) do
    if t.health <= 0 then
      table.remove(GameData.trooper, key)
      NonInteractionObject.new(
        t.x, t.y, GameData.textures.trooper.dead,
        math.random(0, 62),
        math.random(2, 15),
        nil
      )
    end
  end
end

function Trooper.draw_all()
  for key, t in ipairs(GameData.trooper) do
    DrawProtocol(t)
    if t.selected then
      love.graphics.rectangle("line", t.x , t.y,32,32)
    end
  end
end

return Trooper